apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://maven.google.com"
        }
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'GradleDependency', 'SetJavaScriptEnabled', 'UnusedResources', 'Typos', 'ViewConstructor', 'OldTargetApi'
        // set to true to turn off analysis progress reporting by lint
        quiet false
        // if true, stop the gradle build if errors are found
        abortOnError true
        // if true, only report errors
        ignoreWarnings false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile "org.robolectric:robolectric:3.3.2"
    testCompile 'org.robolectric:shadows-httpclient:3.3.2'

    compile 'com.google.code.gson:gson:2.7'
    compile 'com.android.volley:volley:1.0.0'
    compile 'com.android.support:recyclerview-v7:26.0.0'
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

def isReleaseBuild() {
    def env = System.getenv()
    String tag = env['TRAVIS_TAG']
    if(tag == null || tag.isEmpty()){
        println 'This is not tagged build'
        return false
    }
    String pullRequest = env['TRAVIS_PULL_REQUEST']
    if(pullRequest != null && !pullRequest.equalsIgnoreCase('false')){
        println 'This is pull request'
        return false
    }
    return true
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = project.group
                pom.artifactId = 'wallee-android-sdk'
                pom.version = project.version

                def env = System.getenv();
                String nexusUsername = env['OSSRH_JIRA_USERNAME']
                String nexusPassword = env['OSSRH_JIRA_PASSWORD']

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                    authentication(userName: nexusUsername, password: nexusPassword)
                }

                pom.project {
                    name 'wallee-android-sdk'
                    description 'The SDK for integrating android applications with wallee.'
                    url 'https://wallee.com'
                    packaging 'aar'

                    organization {
                        name 'customweb GmbH'
                        url 'https://www.customweb.com'
                    }

                    scm {
                        url 'https://github.com/wallee-payment/wallee-android-sdk'
                        connection 'scm:git:git@github.com:wallee-payment/wallee-android-sdk.git'
                        developerConnection 'scm:git:git@github.com:wallee-payment/wallee-android-sdk.git'
                    }

                    licenses {
                        license {
                            name 'Apache-2.0'
                            url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'thomas.hunziker'
                            name 'Thomas Hunziker'
                        }
                    }

                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}